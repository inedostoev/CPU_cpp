#ifdef CPUCMDS

CPUCMD(NOP,		0,		{})

CPUCMD(MOV,		2,		if(masRegOrNum_[0] == true) 
                            arg = registers_[(int)masArgs_[0]]; 
                        else arg = masArgs_[0];                                     
                        assert(masRegOrNum_[1] == true); 
                        registers_[(int)masArgs_[1]] = arg;)

CPUCMD(ADDS,	0,		stack_.push(stack_.pop() + stack_.pop());)

CPUCMD(SUBS,	0,		arg = stack_.pop();
						stack_.push(arg - stack_.pop());)

CPUCMD(MULS,	0,		stack_.push(stack_.pop() * stack_.pop());)

CPUCMD(DIVS,	0,		arg = stack_.pop();
						stack_.push(arg / stack_.pop());)

#define ARITH_OPERATIONS(oper);                                         \
assert(masRegOrNum_[0] == true);                                        \
arg = registers_[(int)masArgs_[0]];                                     \
if(masRegOrNum_[1] == true) secondArg = registers_[(int)masArgs_[1]];   \
    else secondArg = masArgs_[1];                                       \
arg = arg oper secondArg;                                               \
registers_[(int)masArgs_[0]] = arg;                                     

CPUCMD(ADD,		2,		ARITH_OPERATIONS(+))

CPUCMD(SUB,		2,		ARITH_OPERATIONS(-))

CPUCMD(MUL,		2,		ARITH_OPERATIONS(*))

CPUCMD(DIV,		2,		ARITH_OPERATIONS(/))	

#undef ARITH_OPERATIONS

CPUCMD(IN,		0,		{printf("#Print number\n");
						int count = scanf("%9lg", &arg);
                        assert(count <= 10);
						stack_.push(arg);})

CPUCMD(OUT,		0,		printf("%lg\n", stack_.pop());)

CPUCMD(PUSH,	1,		if (masRegOrNum_[0] == true) {
							arg = registers_[(int)masArgs_[0]];
							stack_.push(arg);
						}
						else stack_.push(masArgs_[0]);)

CPUCMD(POP,		1,		registers_[(int)masArgs_[0]] = stack_.pop();)	

CPUCMD(HLT,		0,		ip_ = cmdQt_;)

CPUCMD(JMP,		1,		arg = (int)masArgs_[0];
                        moveIp(arg);)	

#define IFJMP(condition);                                               \
if(masRegOrNum_[0] == true) arg = registers_[(int)masArgs_[0]];         \
    else arg = masArgs_[0];                                             \
if(masRegOrNum_[1] == true) secondArg = registers_[(int)masArgs_[1]];   \
    else secondArg = masArgs_[1];                                       \
if(arg condition secondArg) {                                           \
    arg = (int)masArgs_[2];                                             \
    moveIp(arg);                                                        \
    }                                                           

CPUCMD(JA,		3,		IFJMP(>))

CPUCMD(JAE,		3,		IFJMP(>=))

CPUCMD(JB,		3,	    IFJMP(<))

CPUCMD(JBE,		3,		IFJMP(<=))

CPUCMD(JE,		3,		if(masRegOrNum_[0] == true) 
                            arg = registers_[(int)masArgs_[0]];
                        else arg = masArgs_[0];                                        
                        if(masRegOrNum_[1] == true) 
                            secondArg = registers_[(int)masArgs_[1]]; 
                        else secondArg = masArgs_[1]; 
                        if(arg - secondArg < 0.001 && secondArg - arg < 0.001) {
                            arg = (int)masArgs_[2];                                           
                            moveIp(arg);                                                      
                        })

CPUCMD(JNE,		3,		if(masRegOrNum_[0] == true) 
                            arg = registers_[(int)masArgs_[0]];
                        else arg = masArgs_[0];                                        
                        if(masRegOrNum_[1] == true) 
                            secondArg = registers_[(int)masArgs_[1]]; 
                        else secondArg = masArgs_[1]; 
                        if(arg - secondArg >= 0.001 || secondArg - arg >= 0.001) {
                            arg = (int)masArgs_[2];                                           
                            moveIp(arg);                                                      
                        })

#undef IFJMP

#endif
